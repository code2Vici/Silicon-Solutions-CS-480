/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs480.gradebook;
import java.awt.*;
import static java.awt.Frame.NORMAL;
import java.awt.event.*;
import static java.awt.image.ImageObserver.ERROR;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.util.LinkedList;
import javax.sound.midi.SysexMessage;
import javax.swing.table.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
/**
 *
 * @author Phuoc
 */
public class GradeBookApp extends javax.swing.JFrame {

    /**
     * Creates new form GradeBookApp
     */
    
    DefaultTableModel model = new DefaultTableModel();
    DefaultTableModel categoryModel = new DefaultTableModel();
    Course myCourse = new Course();
    LinkedList<Student> students = myCourse.students;
    Student s = null;
    ArrayList<String> ls = new ArrayList<String>();
    
    public GradeBookApp() {
        initComponents();
        myInitComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollBar1 = new javax.swing.JScrollBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        gradeBookTable = new javax.swing.JTable();
        termLabel = new javax.swing.JLabel();
        courseLabel = new javax.swing.JLabel();
        addTermButton = new javax.swing.JButton();
        addCourseButton = new javax.swing.JButton();
        termTextField = new javax.swing.JTextField();
        courseTextField = new javax.swing.JTextField();
        middleNameTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        addStudentButton = new javax.swing.JButton();
        addAssignButton = new javax.swing.JButton();
        lastNameTextField = new javax.swing.JTextField();
        studentIDTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        delStudentButton = new javax.swing.JButton();
        delAssignButton = new javax.swing.JButton();
        finalGradeButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gradeBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "LastName", "MiddleName", "FirstName", "FinalGrade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        gradeBookTable.setToolTipText("This is the list of the course");
        jScrollPane3.setViewportView(gradeBookTable);

        termLabel.setText(" ");

        courseLabel.setText(" ");

        addTermButton.setMnemonic('T');
        addTermButton.setText("Add Term");
        addTermButton.setToolTipText("Add Term Button");
        addTermButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTermButtonActionPerformed(evt);
            }
        });

        addCourseButton.setMnemonic('C');
        addCourseButton.setText("Add Course");
        addCourseButton.setToolTipText("Add Course Button");
        addCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseButtonActionPerformed(evt);
            }
        });

        termTextField.setToolTipText("Input Term");
        termTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termTextFieldActionPerformed(evt);
            }
        });

        courseTextField.setToolTipText("Input Course");

        middleNameTextField.setText("Middle Name");
        middleNameTextField.setToolTipText("Input Student middle name");

        firstNameTextField.setText("First Name");
        firstNameTextField.setToolTipText("Input Student first name");

        addStudentButton.setMnemonic('S');
        addStudentButton.setText("Add Student");
        addStudentButton.setToolTipText("Add Student Button");
        addStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentButtonActionPerformed(evt);
            }
        });

        addAssignButton.setMnemonic('A');
        addAssignButton.setText("Add Assi");
        addAssignButton.setToolTipText("Add assignment to the course");
        addAssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAssignButtonActionPerformed(evt);
            }
        });

        lastNameTextField.setText("Last Name");
        lastNameTextField.setToolTipText("Input Student last name");

        studentIDTextField.setText("Student ID");
        studentIDTextField.setToolTipText("Input Student ID");

        jLabel1.setText("Bronco ID:");

        jLabel2.setText("Course:");

        jLabel3.setText("Term:");

        jButton1.setMnemonic('M');
        jButton1.setText("Modify table");
        jButton1.setToolTipText("Add grade for the student");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        delStudentButton.setText("Delete Student");
        delStudentButton.setToolTipText("Delete student out of the list");
        delStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delStudentButtonActionPerformed(evt);
            }
        });

        delAssignButton.setText("Delete Assignment");
        delAssignButton.setToolTipText("Delete assignment out of the list");
        delAssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delAssignButtonActionPerformed(evt);
            }
        });

        finalGradeButton.setMnemonic('C');
        finalGradeButton.setText("Calculate Final Grade");
        finalGradeButton.setToolTipText("Calculate the final grade column in the list");
        finalGradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalGradeButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Last Name:");

        jButton2.setText("Add Category");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(termLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(jLabel2)
                                .addGap(3, 3, 3)
                                .addComponent(courseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(finalGradeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(termTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addTermButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addAssignButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(courseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addCourseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delStudentButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delAssignButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(studentIDTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lastNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(middleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addStudentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(studentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addStudentButton)
                    .addComponent(addTermButton)
                    .addComponent(termTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(middleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCourseButton)
                    .addComponent(courseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delStudentButton)
                            .addComponent(delAssignButton)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(addAssignButton)
                            .addComponent(finalGradeButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(courseLabel)
                            .addComponent(jLabel3)
                            .addComponent(termLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myInitComponents(){
        
        menuBar = new javax.swing.JMenuBar();
        setJMenuBar(menuBar);
        
        fileMenu = new javax.swing.JMenu("File");
        fileMenu.setMnemonic(KeyEvent.VK_F);
        menuBar.add(fileMenu);
        
         saveAction = new javax.swing.JMenuItem("Save", KeyEvent.VK_S);
         openAction = new javax.swing.JMenuItem("Open", KeyEvent.VK_O);
        exportCSV = new javax.swing.JMenuItem("Export CSV", KeyEvent.VK_C);
         exitAction = new javax.swing.JMenuItem("Exit", KeyEvent.VK_E);
        
        exitAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                System.exit(0);
            }
        });
        saveAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    
                myCourse.saveCourse();
                swing();
                } catch (Exception e){
                }
            }
        });
        openAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                myCourse = myCourse.openCourse();
                load();
                } catch (Exception e){
                   
                }
            }
        });
        exportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    myCourse.exportToCSV();
                    swing();
                } catch (Exception e){
                   
                }
            }
        });
        fileMenu.add(saveAction);
        fileMenu.add(openAction);
        fileMenu.addSeparator();
        fileMenu.add(exportCSV);
        fileMenu.addSeparator();
        fileMenu.add(exitAction);
        
       Object[] columns = {"ID", "First Name", "Middle Name", "Last Name", "Final Grade"};
        model.setColumnIdentifiers(columns);
        
        
        gradeBookTable.setModel(model);
        gradeBookTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        gradeBookTable.setAutoCreateRowSorter(true);
        
      gradeBookTable.getModel().addTableModelListener(new TableModelListener() {
           
      public void tableChanged(TableModelEvent e) {
         int row = e.getFirstRow();
         int column = e.getColumn();
         int a = e.getType();
        System.out.println(row + " " + column + " " + a);
        String columnName = gradeBookTable.getColumnName(column);
        System.out.println(columnName);
      
        
      }
    });
      
      
    
     /*
       gradeBookTable.setCellSelectionEnabled(true);
      
    ListSelectionModel cellSelectionModel = gradeBookTable.getSelectionModel();
    cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
          
        String selectedData = null;

        int[] selectedRow = gradeBookTable.getSelectedRows();
        int[] selectedColumns = gradeBookTable.getSelectedColumns();

        for (int i = 0; i < selectedRow.length; i++) {
          for (int j = 0; j < selectedColumns.length; j++) {
            selectedData = (String) gradeBookTable.getValueAt(selectedRow[i], selectedColumns[j]);
            System.out.println(gradeBookTable.getSelectedRow() + " " + gradeBookTable.getSelectedColumn());
          }
        }
        
        System.out.println("Selected: " + selectedData);
      }

    });*/
       

    }
    
    private void swing(){
        SwingUtilities.updateComponentTreeUI(this);
    }
    
    private void load(){
      SwingUtilities.updateComponentTreeUI(this);
        termLabel.setText(myCourse.getTerm());
        courseLabel.setText(myCourse.getCourseName());
        
        LinkedList<Student> currentStudents = myCourse.students;
        LinkedList<Assignment> assignments = myCourse.assignments;
        ArrayList<Double> arrayGrade =new ArrayList<Double>();
        ArrayList<Double> arrayFinal =new ArrayList<Double>();
        
        Object[] columns = {"ID", "First Name", "Middle Name", "Last Name"};
                model.setColumnIdentifiers(columns);
                 model.addColumn("Final Grade");
             for(Assignment a: assignments){
				model.addColumn(a.getAssignmentName() + "("+a.getTotalPoints()+")"); 
			}
            
         for(Student s : currentStudents){
             
                //System.out.println(s.getBroncoID()+ " asdasd" + s.getLastName()+ " " + s.getMiddleName()+ " " + s.getFirstName());
                  model.addRow(new Object[]{s.getBroncoID(), s.getLastName(), s.getMiddleName(), s.getFirstName() });
                    
                  
                  for(Assignment a : assignments){
					if(a.containsBroncoID(s.getBroncoID())){
						arrayGrade.add(a.getGrade(s.getBroncoID()));
					}
					else{
						arrayGrade.add(0.0);
					}
                                     
                                        
            }
            arrayFinal.add(myCourse.roundDouble(myCourse.calculateGrade(s)));
         }
         int rows = gradeBookTable.getRowCount();
                    System.out.println(rows);
          int cols = gradeBookTable.getColumnCount();
         System.out.println(cols);
         
         
           
           
           int count = 0;
           for(int i = 0; i < rows; i++){
               for(int j = 5; j < cols; j++){
                   gradeBookTable.setValueAt(arrayGrade.get(count), i, j);
                   count++;
               }
           }
        
           
           for(int i = 0 ; i < rows; i++){
                   System.out.println(arrayFinal.get(i));
                gradeBookTable.setValueAt(arrayFinal.get(i), rows, 4);
           }
           LinkedList<Category> categories = myCourse.categories;
           for(Category c: categories){
                                System.out.println(c.getCategoryName());
                                categoryModel.addRow(new Object[]{c.getCategoryName()});
			}
           
            
  /*      for(Student s : currentStudents){
			
            double grade = myCourse.roundDouble(myCourse.calculateGrade(s));
            array.add(grade);
	}
        System.out.println("The first element is: " + array.get(0));
        
        for(int i = 0; i < rows; i++){
            gradeBookTable.setValueAt(array.get(i), i, 4);*/
         
    }
    
    
    private void addTermButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTermButtonActionPerformed
       if(termTextField.getText().length() == 0){
            String message = "Enter Term please.";
            String title = "Enter Term";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
                termLabel.setText(termTextField.getText());
       }
    }//GEN-LAST:event_addTermButtonActionPerformed

    private void addCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseButtonActionPerformed
         if(termTextField.getText().length() == 0){
            String message = "Enter Term please.";
            String title = "Enter Term";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else if (courseTextField.getText().length() == 0){
            String message = "Enter Course please.";
            String title = "Enter Course";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
               courseLabel.setText(courseTextField.getText());
               myCourse = new Course(termLabel.getText(), courseLabel.getText());
               
        }
       
    }//GEN-LAST:event_addCourseButtonActionPerformed

    private void termTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_termTextFieldActionPerformed

    private void addStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentButtonActionPerformed
        if(courseLabel.getText() == " "){
            String message = "Enter Course please.";
            String title = "Enter Course";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
        Object[] row = new Object[4];
        if(termLabel.getText().length() == 0){
            String message = "Enter Term please.";
            String title = "Enter Term";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else if (courseLabel.getText().length() == 0){
            String message = "Enter Course please.";
            String title = "Enter Course";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
   
            Object studentID = studentIDTextField.getText();
            Object lastName = lastNameTextField.getText();
            Object middleName = middleNameTextField.getText();
            Object firstName = firstNameTextField.getText();
            
            model.addRow(new Object[]{studentID, lastName, middleName, firstName});
            
            myCourse.addStudent(studentIDTextField.getText(), lastNameTextField.getText(), firstNameTextField.getText(), middleNameTextField.getText());
     /*       for(Student s : students){
                System.out.println(s.getBroncoID()+ " " + s.getLastName()+ " " + s.getMiddleName()+ " " + s.getFirstName());
                model.addRow(new Object[]{s.getBroncoID(), s.getLastName(), s.getMiddleName(), s.getFirstName()});
            
            }*/
           
            studentIDTextField.setText("");
            lastNameTextField.setText("");
            middleNameTextField.setText("");
            firstNameTextField.setText("");
                      
        }
        }
    }//GEN-LAST:event_addStudentButtonActionPerformed

    private void addAssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAssignButtonActionPerformed
        if(courseLabel.getText() == " "){
            String message = "Enter Course please.";
            String title = "Enter Course";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
            createAssignmentPanel();
      }
    }//GEN-LAST:event_addAssignButtonActionPerformed

    public void createAssignmentPanel(){
//        ls.add(myCourse.getCategoryByName(categoryName));
       
        /*String message = "Enter Assignment";
        String title = "Enter Term";
        String assignName = JOptionPane.showInputDialog(message);
        
        model.addColumn(assignName);*/
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        
        JComboBox<String> assignType = new JComboBox<String>();
        assignType.setModel(new DefaultComboBoxModel(ls.toArray()));
        JScrollPane assignListScrollPane = new JScrollPane(assignType);    

        JLabel assignTypeLabel = new JLabel("Type:");
        myPanel.add(assignTypeLabel);
        myPanel.add(assignListScrollPane);
        
        JTextField assignment = new JTextField(1);
        JLabel assignmentLabel = new JLabel("Name:");
        myPanel.add(assignmentLabel);
        myPanel.add(assignment);
        
        JTextField weight = new JTextField(5);
        JLabel weightLabel = new JLabel("Assignment Grade:");
        myPanel.add(weightLabel);
        myPanel.add(weight);
        

      int result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Please enter assignment information!", JOptionPane.OK_CANCEL_OPTION);
      if (result == JOptionPane.OK_OPTION) {
          if(assignment.getText().length() == 0){
                String message = "Enter assignment name please.";
                String title = "Enter Assignment name";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
          } else if (weight.getText().length() == 0){
                String message = "Enter Assignment point please.";
                String title = "Enter Assignment Point";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
          } else {
              String data = "";
                if (assignType.getSelectedIndex() != -1) {                     
                    data = (String) assignType.getItemAt(assignType.getSelectedIndex()); 
                    System.out.println(data);
                }
                System.out.println(assignment.getText());
                System.out.println("weight: " + Double.parseDouble(weight.getText()));
                String assignName = data + " " + assignment.getText();

                model.addColumn(assignName);
                myCourse.addAssignment(data, assignName, Double.parseDouble(weight.getText()));
       
        }
      }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         
        JPanel myPanel = new JPanel();
        
        JTextField grade = new JTextField(10);
        JLabel gradeLabel = new JLabel("Grade:");
        myPanel.add(gradeLabel);
        myPanel.add(grade);
        int result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Please enter grade!", JOptionPane.OK_CANCEL_OPTION);
         if (result == JOptionPane.OK_OPTION) {
             if (grade.getText().length() == 0){
                 String message = "Enter grade please.";
                String title = "Enter Grade";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
             } else if(Integer.parseInt(grade.getText()) > 3){
                 
             } else {
                 gradeBookTable.setCellSelectionEnabled(true);
      
                int row = gradeBookTable.getSelectedRow();
                int col = gradeBookTable.getSelectedColumn();
    
                gradeBookTable.setValueAt(Integer.parseInt(grade.getText()), row, col);
                String assignName = gradeBookTable.getColumnName(col);
                String id =(String) gradeBookTable.getValueAt(row, 0);
                System.out.println("Student ID: " + id);
                System.out.println("assignment Name: " + assignName);
                System.out.println("Grade: " + Integer.parseInt(grade.getText()));
                myCourse.addGrade(id, assignName, Integer.parseInt(grade.getText()));
             }
         }
       /*
        
       */
      // gradeBookTable.setModel(model);
     //  myCourse.addGrade(id, assignName, Integer.parseInt(grade));
      /* gradeBookTable.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int column1 = e.getColumn();
                String columnName = gradeBookTable.getColumnName(column1);
                System.out.println("assignment Name: " + columnName);
                myCourse.addGrade(id, columnName, Integer.parseInt(grade));
        
        
            }
        });*/
       
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void delStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delStudentButtonActionPerformed
        int row = gradeBookTable.getSelectedRow();
        if(row == -1){
            String message =    "Select a student please.";
                String title = "Choose student";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
        try{
        ((DefaultTableModel)gradeBookTable.getModel()).removeRow(row);
        String id =(String) gradeBookTable.getValueAt(row, 0);
        myCourse.removeStudent(id);
        } catch (Exception e){
            
        }
        }
    }//GEN-LAST:event_delStudentButtonActionPerformed

    private void delAssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delAssignButtonActionPerformed
        int col = gradeBookTable.getSelectedColumn();
        if(col == -1){
            String message =    "Select an assignment please.";
                String title = "Choose assignment student";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
        String assignName = gradeBookTable.getColumnName(col);
        System.out.println(assignName);
        Remove(gradeBookTable,col);
        myCourse.removeAssignment(assignName);
        }
    }//GEN-LAST:event_delAssignButtonActionPerformed

    private void finalGradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalGradeButtonActionPerformed
       int rows = gradeBookTable.getRowCount();
       if (rows == 0){
           String message =    "List is not found in the table";
                String title = "List is not found";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
       } else {
       System.out.println(rows);
        LinkedList<Student> currentStudents = myCourse.students;
        ArrayList<Double> array =new ArrayList<Double>();
        for(Student s : currentStudents){
			
            double grade = myCourse.roundDouble(myCourse.calculateGrade(s));
            array.add(grade);
	}
        System.out.println("The first element is: " + array.get(0));
        
        for(int i = 0; i < rows; i++){
            gradeBookTable.setValueAt(array.get(i), i, 4);
            System.out.println(myCourse);
        }
       }
    }//GEN-LAST:event_finalGradeButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(courseLabel.getText() == " "){
            String message = "Enter Course please.";
            String title = "Enter Course";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
            createCategoryPanel();
      }
    }//GEN-LAST:event_jButton2ActionPerformed

    public void createCategoryPanel(){
       
        Dimension dialogDimension = new Dimension(500, 600);
       
        	final JDialog dialog = new JDialog();
 
		dialog.setMinimumSize(dialogDimension);
 
		dialog.setLayout(new GridBagLayout());
                dialog.setVisible(true);
                dialog.setLocationRelativeTo(null);
                dialog.setTitle("Category");
                Object[] columns = {"Category", "Weight of Category"};
                categoryModel.setColumnIdentifiers(columns);

                table = new JTable(2,2);
                JScrollPane scrollPane = new JScrollPane(table);
                
                JButton addButton = new JButton("Add");
                
                
                JButton modifyButton = new JButton("Modify");
                JButton removeButton = new JButton("Remove");
                
                GroupLayout layout = new javax.swing.GroupLayout(dialog.getContentPane());
                dialog.getContentPane().setLayout(layout);
                layout.setHorizontalGroup(layout.createParallelGroup()
                        .addGroup(layout.createSequentialGroup()
                         .addComponent(scrollPane))
                        .addGroup(layout.createSequentialGroup()
                    .addComponent(addButton)
                        .addComponent(modifyButton)
                        .addComponent(removeButton))
                );
                layout.setVerticalGroup(layout.createSequentialGroup()
                       
        .addComponent(scrollPane)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton)
                        .addComponent(modifyButton)
                        .addComponent(removeButton))
                    );
                table.setModel(categoryModel);
                table.setAutoCreateRowSorter(true);
               
                 addButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                addButtonPerformed(evt);
            }
        });
                 modifyButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                modifyButtonPerformed(evt);
            }
        });
                removeButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                removeButtonPerformed(evt);
            }
        });
        
    }
    
    private void addButtonPerformed(java.awt.event.ActionEvent evt) {                                                
        
       JPanel myCategoryPanel = new JPanel();
        myCategoryPanel.setLayout(new BoxLayout(myCategoryPanel, BoxLayout.Y_AXIS));
        

        
        JTextField category = new JTextField(1);
        JLabel categoryLabel = new JLabel("Category Name:");
        myCategoryPanel.add(categoryLabel);
        myCategoryPanel.add(category);
        
        JTextField categoryWeight = new JTextField(1);
        JLabel categoryWeightLabel = new JLabel("Category Weight:");
        myCategoryPanel.add(categoryWeightLabel);
        myCategoryPanel.add(categoryWeight);
        
        int result = JOptionPane.showConfirmDialog(null, myCategoryPanel, 
               "Please enter assignment information!", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            if(category.getText().length() == 0){
                String message = "Enter category name please.";
                String title = "Enter category name";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
            } else {
                Object categoryName = category.getText();
                Object categoryW = categoryWeight.getText();
            
                categoryModel.addRow(new Object[]{categoryName, categoryW});
                myCourse.addCategory(category.getText(), Double.parseDouble(categoryWeight.getText()));
                LinkedList<Category> categories = myCourse.categories;
                ls.removeAll(ls);
                for(Category c: categories){
                                ls.add(c.getCategoryName());
			}
               
            }
        }
        
    }     
    
     private void modifyButtonPerformed(java.awt.event.ActionEvent evt) { 
         JPanel myPanel = new JPanel();
        
        JTextField grade = new JTextField(10);
        JLabel gradeLabel = new JLabel("New Weight:");
        myPanel.add(gradeLabel);
        myPanel.add(grade);
        int result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Please enter weight!", JOptionPane.OK_CANCEL_OPTION);
         if (result == JOptionPane.OK_OPTION) {
             if (grade.getText().length() == 0){
                 String message = "Enter weight please.";
                String title = "Enter weight";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
             } else {
                 table.setCellSelectionEnabled(true);
      
                int row = table.getSelectedRow();
                int col = table.getSelectedColumn();
    
                table.setValueAt(Integer.parseInt(grade.getText()), row, col);
                String assignName = table.getColumnName(col);
                String id =(String) table.getValueAt(row, 0);
               // myCourse.addGrade(id, assignName, Integer.parseInt(grade.getText()));
             }
         }
     }
     
      private void removeButtonPerformed(java.awt.event.ActionEvent evt) { 
            int row = table.getSelectedRow();
            if(row == -1){
            String message =    "Select a category please.";
                String title = "Choose category";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        } else {
        try{
        ((DefaultTableModel)table.getModel()).removeRow(row);
            String category2 =(String) table.getValueAt(row, 0);
            System.out.println(category2);
            //myCourse.removeCategory(category2));
        } catch (Exception e){
            
        }
        }
     }
    
               
                
    public void Remove(JTable table, int col_index){
        TableColumn tcol = table.getColumnModel().getColumn(col_index);
        table.removeColumn(tcol);
  }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GradeBookApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GradeBookApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GradeBookApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GradeBookApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GradeBookApp frame = new GradeBookApp();
                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
                frame.setTitle("GradeBook");
                SwingUtilities.updateComponentTreeUI(frame);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAssignButton;
    private javax.swing.JButton addCourseButton;
    private javax.swing.JButton addStudentButton;
    private javax.swing.JButton addTermButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JTextField courseTextField;
    private javax.swing.JButton delAssignButton;
    private javax.swing.JButton delStudentButton;
    private javax.swing.JButton finalGradeButton;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JTable gradeBookTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JTextField middleNameTextField;
    private javax.swing.JTextField studentIDTextField;
    private javax.swing.JLabel termLabel;
    private javax.swing.JTextField termTextField;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JMenuItem exitAction;         
    private javax.swing.JMenuItem openAction;         
    private javax.swing.JMenuItem saveAction;
    private javax.swing.JMenuItem exportCSV;  
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTable table;
}
